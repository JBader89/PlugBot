var util = require('util');
var http = require('http');

var refNames = {
    COLLEGIATE: 'collegiate',
    THESAURUS: 'thesaurus',
    SPANISH: 'spanish',
    MEDICAL: 'medical',
    LEARNERS: 'learners',
    ELEMENTARY: 'sd2',
    INTERMEDIATE: 'sd3',
    SCHOOL: 'sd4'
};

function DictionaryAPI(ref, apiKey, format) {
    var hostname = 'www.dictionaryapi.com';
    var pathTpl = '/api/v1/references/';
    var defaultFormat = 'xml'; //TODO: change default to json once dictionary.com supports

    var searchRefNames = function() {
        if (!ref) {
            return false;
        }

        for (var p in refNames) {
            if (refNames.hasOwnProperty(p) && refNames[p] === ref) {
                return true;
            }
        }

        return false;
    };

    if (arguments.length < 2) {
        throw new ArgumentsError('ref and apiKey are required');
    }

    if (!searchRefNames()) {
        throw new ReferenceNameError('Reference is not supported: ' + ref);
    }

    if (!apiKey) {
        throw new APIKeyError('API key cannot be blank');
    }

    if (format) {
        if (format !== 'xml' || format !== 'json') {
            throw new ArgumentsError('format is not supported: ' + format);
        }
    }
    else {
        format = defaultFormat;
    }
    
    pathTpl += ref + '/%s/%s?key=' + apiKey;

    this.query = function(word, callback) {
        var options = {
            hostname: hostname,
            path: util.format(pathTpl, format, word)
        };
        var data = '';

        var req = http.request(options, function(res) {
            if (res.statusCode < 200 || res.statusCode >= 300) {
                callback(new UnsuccessfulStatusCodeError('HTTP status code is not 2xx'));
            }

            res.setEncoding('utf8');

            res.on('data', function (chunk) {
                data += chunk;
            });

            res.on('end', function() {
                callback(null, data);
            });
        });

        req.on('error', function(e) {
            callback(e);
        });

        req.end();
    };

    this.version = '0.0.1';
}

/* ----- Exceptions ----- */

function ArgumentsError(message) {
    this.name = 'ArgumentsError';
    this.message = message || 'Arguments error';
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = ArgumentsError;

function ReferenceNameError(message) {
    this.name = 'ReferenceNameError';
    this.message = message || 'Reference name error';
}
ReferenceNameError.prototype = new Error();
ReferenceNameError.prototype.constructor = ReferenceNameError;

function APIKeyError(message) {
    this.name = 'APIKeyError';
    this.message = message || 'API key error';
}
APIKeyError.prototype = new Error();
APIKeyError.prototype.constructor = APIKeyError;

function UnsuccessfulStatusCodeError(message) {
    this.name = 'UnsuccessfulStatusCodeError';
    this.message = message || 'Unsuccessful status code error';
}
UnsuccessfulStatusCodeError.prototype = new Error();
UnsuccessfulStatusCodeError.prototype.constructor = UnsuccessfulStatusCodeError;

/* ----- Exports ----- */

exports.DictionaryAPI = DictionaryAPI;
exports.ReferenceNameError = ReferenceNameError;
exports.APIKeyError = APIKeyError;
exports.UnsuccessfulStatusCodeError = UnsuccessfulStatusCodeError;

exports.COLLEGIATE = refNames.COLLEGIATE;
exports.THESAURUS = refNames.THESAURUS;
exports.SPANISH = refNames.SPANISH;
exports.MEDICAL = refNames.MEDICAL;
exports.LEARNERS = refNames.LEARNERS;
exports.ELEMENTARY = refNames.ELEMENTARY;
exports.INTERMEDIATE = refNames.INTERMEDIATE;
exports.SCHOOL = refNames.SCHOOL;
